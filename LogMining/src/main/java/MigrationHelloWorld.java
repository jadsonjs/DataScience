import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'jadson' at '12/02/16 10:48' with Gradle 2.10
 *
 * @author jadson, @date 12/02/16 10:48
 */
public class MigrationHelloWorld {
    
	
    /**
	 * Read from postgres and insert into mongoDB
	 * @param args
	 * @throws SQLException 
	 */
	public static void main(String[] args) throws SQLException {
		
		Connection connection = null;
		
		long tempo = System.currentTimeMillis();
		
		try{
			
			//connection = getConnection("jdbc:postgresql://bddesenv1.info.ufrn.br:5432/sigaa_20130218", "sigaa", "sigaa");
			connection = getConnection("jdbc:postgresql://localhost:5432/sigaa", "postgres", "postgres");
			
			List<Object[]> data = readInformationFromPostgres(connection);
			
			writeInformationIntoMongoDB(data);
			
			// Se tudo ocorrer sem erro, comiga a transação
			connection.commit();
			
		}catch(Exception ex){
			ex.printStackTrace();
			if (connection != null) connection.rollback();
			System.exit(1);
		}finally{
			if (connection != null) connection.close();
		}
		
		System.out.println(" ************** END "+(System.currentTimeMillis()-tempo)/1000+" segundos ************** ");
		System.exit(0);
	}
    
    
	/**
	 * Read information from a common relational database
	 */
	protected static List<Object[]> readInformationFromPostgres(Connection connection) throws SQLException {
		
    	List<Object[]> data = new ArrayList<Object[]>();
    	
    	String sql = " select p.id, p.name, p.  FROM public.person p  ";
		
		PreparedStatement ps = connection.prepareStatement( sql );
		ps.execute();
		ResultSet rs = ps.getResultSet();

		
		while( rs.next() ){
			
			// Dados da inscrição atividade, não para para instanciar o objeto aqui.
			int id = rs.getInt(1);
			String name =  rs.getString(2);
			Date birthDate = rs.getDate(3);
		
			data.add(new Object[]{id, name, birthDate});
		}
		
		rs.close();
		ps.close();
		
		return data;
	}


	/*
	 *   Create a connection with postgreSQL data base
	 *
	 * @param urlFonte
	 * @param usuarioFonte
	 * @param senhaFonte
	 * @return
	 * @throws SQLException
	 */
	private static Connection getConnection(String url, String user, String password) throws SQLException{
		try{
			Class.forName("org.postgresql.Driver");
		} catch (ClassNotFoundException e) {}
		return DriverManager.getConnection(url, user, password);
	}
	
	
	/**
	 * Write information in an NoSQL database
	 * @param data
	 */
	protected static void writeInformationIntoMongoDB(List<Object[]> data) {
	
			
	}


}
